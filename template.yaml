AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Comparison of the code to use Amazon MQ for RabbitMQ vs AWS SQS

Resources:
  MQBroker:
    Type: AWS::AmazonMQ::Broker
    Properties: 
      AutoMinorVersionUpgrade: false
      BrokerName: myMQBroker
      DeploymentMode: SINGLE_INSTANCE
      EngineType: RABBITMQ
      EngineVersion: "3.8.11"
      HostInstanceType: mq.m5.large
      PubliclyAccessible: true
      Users:
        - Password: '{{resolve:secretsmanager:MQAccess:SecretString:password}}'
          Username: '{{resolve:secretsmanager:MQAccess:SecretString:username}}'
    
  MQProducer:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/rbmq/
      Timeout: 3
      Handler: producer.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          mqhost: !Select [ 0, !Split [ ':', !Select [ 2, !Split [ '/', !Select [ 0, !GetAtt 'MQBroker.AmqpEndpoints' ] ] ] ] ]
          mquser: '{{resolve:secretsmanager:MQAccess:SecretString:username}}'
          mqpass: '{{resolve:secretsmanager:MQAccess:SecretString:password}}'         
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
              - mq:DescribeBroker
              - secretsmanager:GetSecretValue
    DependsOn: MQBroker

  MQConsumer:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/rbmq/
      Timeout: 10
      Handler: consumer.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          mqhost: !Select [ 0, !Split [ ':', !Select [ 2, !Split [ '/', !Select [ 0, !GetAtt 'MQBroker.AmqpEndpoints' ] ] ] ] ]
          mquser: '{{resolve:secretsmanager:MQAccess:SecretString:username}}'
          mqpass: '{{resolve:secretsmanager:MQAccess:SecretString:password}}'
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: '*'
              Action:
              - mq:DescribeBroker
              - secretsmanager:GetSecretValue
    DependsOn: MQBroker
  
  MySqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      ContentBasedDeduplication: True #Exactly-once processing
      QueueName: MySqsQueue.fifo

  SQSConsumer:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/sqs/
      Timeout: 3
      Handler: consumer.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref MySqsQueue
      Policies:
        - SQSPollerPolicy:
            QueueName: !GetAtt MySqsQueue.QueueName
    DependsOn: MySqsQueue

  SQSProducer:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: code/sqs/
      Timeout: 3
      Handler: producer.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref MySqsQueue
      Policies:
        - SQSSendMessagePolicy:
            QueueName: !GetAtt MySqsQueue.QueueName
    DependsOn: MySqsQueue

  MySnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      FifoTopic: True
      TopicName: mySNSTopic.fifo
      ContentBasedDeduplication: True

  SpecificCoinQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      ContentBasedDeduplication: True #Exactly-once processing
      QueueName: SpecificCoinQueue.fifo

  SpecificStoreSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt SpecificCoinQueue.Arn
      TopicArn: !Ref MySnsTopic
      #see https://docs.aws.amazon.com/sns/latest/dg/sns-large-payload-raw-message-delivery.html
      RawMessageDelivery: True
      # Enables the subscriber to filter out unwanted messages
      #see https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html
      FilterPolicy: {"coin": ["example_coin"]}
  
  MultipleExchangesQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      ContentBasedDeduplication: True #Exactly-once processing
      QueueName: MultipleExchangesQueue.fifo

  MultipleExchangesSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt MultipleExchangesQueue.Arn
      TopicArn: !Ref MySnsTopic
      #see https://docs.aws.amazon.com/sns/latest/dg/sns-large-payload-raw-message-delivery.html
      RawMessageDelivery: True
      # Enables the subscriber to filter out unwanted messages
      #see https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html
      FilterPolicy: {"exchange_id": ["mychosenexchange", "mynextexchange"]}

  SQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref SpecificCoinQueue
        - !Ref MultipleExchangesQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
            Effect: Allow
            Principal:
              Service: "sns.amazonaws.com"
            Action: SQS:SendMessage          
            Resource: '*'
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MySnsTopic